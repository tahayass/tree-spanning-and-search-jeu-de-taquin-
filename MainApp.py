# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tp3_interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np 
from BFSModule import *
from DFSModule import *
from AstarHModule import *
from Astar3HMModule import *
from VisualizationModule import *
from IPython.display import clear_output


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.solution=[]
        self.input=np.empty([3,3],dtype=np.uint8)
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(964, 679)
        MainWindow.setAcceptDrops(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.search_group = QtWidgets.QGroupBox(self.centralwidget)
        self.search_group.setGeometry(QtCore.QRect(50, 240, 241, 191))
        self.search_group.setObjectName("search_group")
        self.BFS_button = QtWidgets.QRadioButton(self.search_group)
        self.BFS_button.setGeometry(QtCore.QRect(30, 30, 95, 20))
        self.BFS_button.setObjectName("BFS_button")
        self.DFS_button = QtWidgets.QRadioButton(self.search_group)
        self.DFS_button.setGeometry(QtCore.QRect(30, 60, 95, 20))
        self.DFS_button.setObjectName("DFS_button")
        self.IDFS_button = QtWidgets.QRadioButton(self.search_group)
        self.IDFS_button.setGeometry(QtCore.QRect(30, 90, 95, 20))
        self.IDFS_button.setObjectName("IDFS_button")
        self.A_H_button = QtWidgets.QRadioButton(self.search_group)
        self.A_H_button.setGeometry(QtCore.QRect(30, 120, 95, 20))
        self.A_H_button.setObjectName("A_H_button")
        self.A_3HM_button = QtWidgets.QRadioButton(self.search_group)
        self.A_3HM_button.setGeometry(QtCore.QRect(30, 150, 95, 20))
        self.A_3HM_button.setObjectName("A_3HM_button")
        self.Input_group = QtWidgets.QGroupBox(self.centralwidget)
        self.Input_group.setGeometry(QtCore.QRect(80, 100, 171, 121))
        self.Input_group.setObjectName("Input_group")
        self.r0c0 = QtWidgets.QSpinBox(self.Input_group)
        self.r0c0.setGeometry(QtCore.QRect(20, 30, 42, 22))
        self.r0c0.setObjectName("r0c0")
        self.r0c1 = QtWidgets.QSpinBox(self.Input_group)
        self.r0c1.setGeometry(QtCore.QRect(60, 30, 42, 22))
        self.r0c1.setObjectName("r0c1")
        self.r0c2 = QtWidgets.QSpinBox(self.Input_group)
        self.r0c2.setGeometry(QtCore.QRect(100, 30, 42, 22))
        self.r0c2.setObjectName("r0c2")
        self.r1c0 = QtWidgets.QSpinBox(self.Input_group)
        self.r1c0.setGeometry(QtCore.QRect(20, 50, 41, 22))
        self.r1c0.setObjectName("r1c0")
        self.r1c1 = QtWidgets.QSpinBox(self.Input_group)
        self.r1c1.setGeometry(QtCore.QRect(60, 50, 42, 22))
        self.r1c1.setObjectName("r1c1")
        self.r1c2 = QtWidgets.QSpinBox(self.Input_group)
        self.r1c2.setGeometry(QtCore.QRect(100, 50, 42, 22))
        self.r1c2.setObjectName("r1c2")
        self.r2c0 = QtWidgets.QSpinBox(self.Input_group)
        self.r2c0.setGeometry(QtCore.QRect(20, 70, 41, 22))
        self.r2c0.setObjectName("r2c0")
        self.r2c1 = QtWidgets.QSpinBox(self.Input_group)
        self.r2c1.setGeometry(QtCore.QRect(60, 70, 42, 22))
        self.r2c1.setObjectName("r2c1")
        self.r2c2 = QtWidgets.QSpinBox(self.Input_group)
        self.r2c2.setGeometry(QtCore.QRect(100, 70, 42, 22))
        self.r2c2.setObjectName("r2c2")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(420, 110, 151, 141))
        self.groupBox.setObjectName("groupBox")
        self.r0c0_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r0c0_2.setGeometry(QtCore.QRect(30, 30, 31, 31))
        self.r0c0_2.setObjectName("r0c0_2")
        self.r0c1_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r0c1_2.setGeometry(QtCore.QRect(60, 30, 31, 31))
        self.r0c1_2.setObjectName("r0c1_2")
        self.r0c2_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r0c2_2.setGeometry(QtCore.QRect(90, 30, 31, 31))
        self.r0c2_2.setObjectName("r0c2_2")
        self.r1c0_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r1c0_2.setGeometry(QtCore.QRect(30, 60, 31, 31))
        self.r1c0_2.setObjectName("r1c0_2")
        self.r1c1_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r1c1_2.setGeometry(QtCore.QRect(60, 60, 31, 31))
        self.r1c1_2.setObjectName("r1c1_2")
        self.r2c0_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r2c0_2.setGeometry(QtCore.QRect(30, 90, 31, 31))
        self.r2c0_2.setObjectName("r2c0_2")
        self.r2c2_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r2c2_2.setGeometry(QtCore.QRect(90, 90, 31, 31))
        self.r2c2_2.setObjectName("r2c2_2")
        self.r2c1_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r2c1_2.setGeometry(QtCore.QRect(60, 90, 31, 31))
        self.r2c1_2.setObjectName("r2c1_2")
        self.r1c2_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.r1c2_2.setGeometry(QtCore.QRect(90, 60, 31, 31))
        self.r1c2_2.setObjectName("r1c2_2")
        self.StartButton = QtWidgets.QPushButton(self.centralwidget)
        self.StartButton.setGeometry(QtCore.QRect(30, 530, 261, 71))
        self.StartButton.setObjectName("StartButton")
        self.StartButton.clicked.connect(self.Pressed)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 440, 101, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 470, 241, 16))
        self.label_3.setObjectName("label_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(370, 280, 121, 51))
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(370, 310, 321, 16))
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(3)
        self.line.setMidLineWidth(1)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(370, 330, 91, 31))
        self.label_4.setObjectName("label_4")
        self.solution_path = QtWidgets.QTextBrowser(self.centralwidget)
        self.solution_path.setGeometry(QtCore.QRect(460, 340, 461, 31))
        self.solution_path.setObjectName("solution_path")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(370, 380, 101, 16))
        self.label_5.setObjectName("label_5")
        self.memory_limit_i = QtWidgets.QLineEdit(self.centralwidget)
        self.memory_limit_i.setGeometry(QtCore.QRect(260, 470, 71, 22))
        self.memory_limit_i.setObjectName("memory_limit_i")
        self.time_limit_i = QtWidgets.QLineEdit(self.centralwidget)
        self.time_limit_i.setGeometry(QtCore.QRect(120, 440, 71, 22))
        self.time_limit_i.setObjectName("time_limit_i")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 610, 951, 20))
        self.label_6.setObjectName("label_6")
        self.solution_length = QtWidgets.QTextBrowser(self.centralwidget)
        self.solution_length.setGeometry(QtCore.QRect(470, 380, 61, 21))
        self.solution_length.setAcceptDrops(True)
        self.solution_length.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.solution_length.setObjectName("solution_length")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(370, 410, 161, 16))
        self.label_7.setObjectName("label_7")
        self.Visualize_button = QtWidgets.QPushButton(self.centralwidget)
        self.Visualize_button.setGeometry(QtCore.QRect(690, 150, 161, 71))
        self.Visualize_button.setObjectName("Visualize_button")
        self.Visualize_button.clicked.connect(self.Visualize)
        self.Nbre_nodes_treated = QtWidgets.QTextBrowser(self.centralwidget)
        self.Nbre_nodes_treated.setGeometry(QtCore.QRect(530, 410, 71, 21))
        self.Nbre_nodes_treated.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.Nbre_nodes_treated.setObjectName("Nbre_nodes_treated")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(370, 440, 171, 16))
        self.label_8.setObjectName("label_8")
        self.ol_length = QtWidgets.QTextBrowser(self.centralwidget)
        self.ol_length.setGeometry(QtCore.QRect(490, 440, 61, 21))
        self.ol_length.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.ol_length.setObjectName("ol_length")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(370, 470, 280, 16))
        self.label_9.setObjectName("label_9")
        self.memory_usage = QtWidgets.QTextBrowser(self.centralwidget)
        self.memory_usage.setGeometry(QtCore.QRect(650, 470, 61, 21))
        self.memory_usage.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.memory_usage.setObjectName("memory_usage")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(370, 500, 101, 16))
        self.label_10.setObjectName("label_10")
        self.time_usage = QtWidgets.QTextBrowser(self.centralwidget)
        self.time_usage.setGeometry(QtCore.QRect(480, 500, 111, 21))
        self.time_usage.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.time_usage.setLineWrapMode(QtWidgets.QTextEdit.FixedColumnWidth)
        self.time_usage.setLineWrapColumnOrWidth(6)
        self.time_usage.setObjectName("time_usage")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(330, 100, 20, 511))
        self.line_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_2.setLineWidth(5)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setObjectName("line_2")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(0, -1, 961, 91))
        self.label_11.setText("")
        self.label_11.setPixmap(QtGui.QPixmap("pyqt_img.png"))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(10, 500, 91, 16))
        self.label_12.setObjectName("label_12")
        self.depth_limit = QtWidgets.QLineEdit(self.centralwidget)
        self.depth_limit.setGeometry(QtCore.QRect(90, 500, 71, 22))
        self.depth_limit.setObjectName("depth_limit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 964, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.search_group.setTitle(_translate("MainWindow", "search algorithm"))
        self.BFS_button.setText(_translate("MainWindow", "BFS"))
        self.DFS_button.setText(_translate("MainWindow", "DFS"))
        self.IDFS_button.setText(_translate("MainWindow", "I-DFS"))
        self.A_H_button.setText(_translate("MainWindow", "A* (H)"))
        self.A_3HM_button.setText(_translate("MainWindow", "A* (3H+M)"))
        self.Input_group.setTitle(_translate("MainWindow", "Matrix input"))
        self.groupBox.setTitle(_translate("MainWindow", "Matrix display"))
        self.StartButton.setText(_translate("MainWindow", "Start"))
        self.label_2.setText(_translate("MainWindow", "Time limit (in s) : "))
        self.label_3.setText(_translate("MainWindow", "Memory limit (number of nodes treated) :"))
        self.label.setText(_translate("MainWindow", "Solution :"))
        self.label_4.setText(_translate("MainWindow", "Solution path : "))
        self.label_5.setText(_translate("MainWindow", "Solution length : "))
        self.label_6.setText(_translate("MainWindow", "NOTE : This process may take a while. A* algorithms do not give optimal solution and maybe slower than BFS and DFS depending on intial matrix (work in progress)"))
        self.label_7.setText(_translate("MainWindow", "Number of nodes treated :"))
        self.Visualize_button.setText(_translate("MainWindow", "Visualize"))
        self.Nbre_nodes_treated.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_8.setText(_translate("MainWindow", "Length of open list :"))
        self.label_9.setText(_translate("MainWindow", "Memory (open and closed lists) usage (Kbytes):"))
        self.label_10.setText(_translate("MainWindow", "Time elapsed (s): "))
        self.label_12.setText(_translate("MainWindow", "Depth limit :"))
        
    def Pressed(self):
        final_node=np.array([[1,2,3],[4,5,6],[7,8,0]])
        input=np.empty([3,3],dtype=np.uint8)
        input[0][0]=self.r0c0.value()
        input[0][1]=self.r0c1.value()
        input[0][2]=self.r0c2.value()
        input[1][0]=self.r1c0.value()
        input[1][1]=self.r1c1.value()
        input[1][2]=self.r1c2.value()
        input[2][0]=self.r2c0.value()
        input[2][1]=self.r2c1.value()
        input[2][2]=self.r2c2.value()
        self.input=input

        time_limit=float(self.time_limit_i.text())
        memory_limit=float(self.memory_limit_i.text())

        if self.BFS_button.isChecked():
            #Set intial Node
            input_BFS=node()
            input_BFS.array=input
            input_BFS.path=[]

            returns=BFS(input_BFS,time_limit,memory_limit)
            self.solution_path.clear()
            self.solution_path.append(listToString(returns[0]))
            self.solution_length.clear()
            self.solution_length.append(str(returns[1]))
            self.Nbre_nodes_treated.clear()
            self.Nbre_nodes_treated.append(str(returns[2]))
            self.ol_length.clear()
            self.ol_length.append(str(returns[3]))
            self.memory_usage.clear()
            self.memory_usage.append(str(returns[4]))
            self.time_usage.clear()
            self.time_usage.append(str(returns[5]))

        if self.DFS_button.isChecked():
            input_DFS=node()
            input_DFS.array=input
            input_DFS.path=[]
            depth_limit2=float(self.depth_limit.text())
            returns=DFS(input_DFS,depth_limit2,time_limit,memory_limit)
            self.solution_path.clear()
            self.solution_path.append(listToString(returns[0]))
            self.solution_length.clear()
            self.solution_length.append(str(returns[1]))
            self.Nbre_nodes_treated.clear()
            self.Nbre_nodes_treated.append(str(returns[2]))
            self.ol_length.clear()
            self.ol_length.append(str(returns[3]))
            self.memory_usage.clear()
            self.memory_usage.append(str(returns[4]))
            self.time_usage.clear()
            self.time_usage.append(str(returns[5]))

        if self.IDFS_button.isChecked():
            input_DFS=node()
            input_DFS.array=input
            input_DFS.path=[]            
            i=1
            t2= time.clock()
            depth_limit2=float(self.depth_limit.text())
            while i<(depth_limit2+1):
                check=False
                total_NT=0
                total_memory=0
                returns=DFS(input_DFS,i,time_limit,memory_limit)
                total_memory=returns[4]+total_memory
                total_NT=returns[3]+total_NT
                if returns[0][0] != -1:
                    check=True
                    t3 = time.clock() - t2
                    self.solution_path.clear()
                    self.solution_path.append(listToString(returns[0]))
                    self.solution_length.clear()
                    self.solution_length.append(str(returns[1]))
                    self.Nbre_nodes_treated.clear()
                    total_NT=total_NT+returns[2]
                    self.Nbre_nodes_treated.append(str(total_NT))
                    self.ol_length.clear()
                    self.ol_length.append(str(returns[3]))
                    self.memory_usage.clear()
                    total_memory=total_memory+returns[4]
                    self.memory_usage.append(str(total_memory))
                i=i+1

            if check==False :
                self.solution_path.clear()
                self.solution_path.append('No solution at this depth')
                self.solution_length.clear()
                self.solution_length.append(str(returns[1]))
                self.Nbre_nodes_treated.clear()
                self.Nbre_nodes_treated.append(str(total_NT))
                self.ol_length.clear()
                self.ol_length.append(str(returns[3]))
                self.memory_usage.clear()
                self.memory_usage.append(str(total_memory))
                self.time_usage.clear()
                self.time_usage.append(str(time.clock()-t2))
        



                   

        if self.A_H_button.isChecked():
            input_AH=node()
            input_AH.array=input
            input_AH.path=[] 

            returns=A_H(input_AH,time_limit,memory_limit)
            self.solution_path.clear()
            self.solution_path.append(listToString(returns[0]))
            self.solution_length.clear()
            self.solution_length.append(str(returns[1]))
            self.Nbre_nodes_treated.clear()
            self.Nbre_nodes_treated.append(str(returns[2]))
            self.ol_length.clear()
            self.ol_length.append(str(returns[3]))
            self.memory_usage.clear()
            self.memory_usage.append(str(returns[4]))
            self.time_usage.clear()
            self.time_usage.append(str(returns[5]))

        if self.A_3HM_button.isChecked():
            input_A3HM=node()
            input_A3HM.array=input
            input_A3HM.path=[]

            returns=A_3H1M(input_A3HM,time_limit,memory_limit)
            self.solution_path.clear()
            self.solution_path.append(listToString(returns[0]))
            self.solution_length.clear()
            self.solution_length.append(str(returns[1]))
            self.Nbre_nodes_treated.clear()
            self.Nbre_nodes_treated.append(str(returns[2]))
            self.ol_length.clear()
            self.ol_length.append(str(returns[3]))
            self.memory_usage.clear()
            self.memory_usage.append(str(returns[4]))
            self.time_usage.clear()
            self.time_usage.append(str(returns[5])) 

        self.solution=returns[0]     


    def Visualize(self):
        array=np.copy(self.input)
        self.r0c0_2.append(str(array[0][0]))
        self.r0c1_2.append(str(array[0][1]))
        self.r0c2_2.append(str(array[0][2]))
        self.r1c0_2.append(str(array[1][0]))
        self.r1c1_2.append(str(array[1][1]))
        self.r1c2_2.append(str(array[1][2]))
        self.r2c0_2.append(str(array[2][0]))
        self.r2c1_2.append(str(array[2][1]))
        self.r2c2_2.append(str(array[2][2]))

        for m in self.solution:
            apply(m,array)
            self.r0c0_2.clear()
            self.r0c1_2.clear()
            self.r0c2_2.clear()
            self.r1c0_2.clear()
            self.r1c1_2.clear()
            self.r1c2_2.clear()
            self.r2c0_2.clear()
            self.r2c1_2.clear()
            self.r2c2_2.clear()
            self.r0c0_2.append(str(array[0][0]))
            self.r0c1_2.append(str(array[0][1]))
            self.r0c2_2.append(str(array[0][2]))
            self.r1c0_2.append(str(array[1][0]))
            self.r1c1_2.append(str(array[1][1]))
            self.r1c2_2.append(str(array[1][2]))
            self.r2c0_2.append(str(array[2][0]))
            self.r2c1_2.append(str(array[2][1]))
            self.r2c2_2.append(str(array[2][2]))
            QtGui.QGuiApplication.processEvents()
            time.sleep(0.8)







            



     







if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
